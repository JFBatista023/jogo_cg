# Makefile para Cosmic Dash - Windows MSYS2/MinGW
# Jogo 3D Endless Runner em OpenGL/GLUT

# Compilador e flags
CXX = g++
CXXFLAGS = -std=c++11 -Wall -Wextra -O2 -DWINDOWS_AUDIO
INCLUDES = -I./src

# Bibliotecas para Windows
LIBS = -lopengl32 -lglu32 -lfreeglut -lwinmm -static-libgcc -static-libstdc++

# Arquivos fonte (incluindo Audio.cpp)
SOURCES = main.cpp \
          src/player/Player.cpp \
          src/obstacle/Obstacle.cpp \
          src/scene/Scene.cpp \
          src/collision/Collision.cpp \
          src/score/Score.cpp \
          src/menu/Menu.cpp \
          src/texture/Texture.cpp \
          src/lighting/Lighting.cpp \
          src/audio/Audio.cpp

# Arquivos objeto
OBJECTS = $(SOURCES:.cpp=.o)

# Nome do executável
TARGET = cosmic_dash.exe
TEST_AUDIO = test_audio.exe

# Regra principal
all: check-audio $(TARGET)

$(TARGET): $(OBJECTS)
	$(CXX) $(OBJECTS) -o $(TARGET) $(LIBS)
	@echo "Cosmic Dash compilado com sucesso para Windows!"
	@echo "Execute com: ./$(TARGET)"

# Regra para compilar arquivos .cpp
%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# Teste de áudio
$(TEST_AUDIO): test_audio.cpp
	$(CXX) $(CXXFLAGS) test_audio.cpp -o $(TEST_AUDIO)

test-audio: $(TEST_AUDIO)
	./$(TEST_AUDIO)

# Verificar bibliotecas de áudio disponíveis
check-audio:
	@echo "=== Verificando bibliotecas de áudio (Windows) ==="
	@echo "✓ Windows Multimedia API (winmm) disponível"
	@echo "✓ OpenGL (opengl32) disponível"
	@echo "✓ GLU (glu32) disponível"
	@if [ -f "/mingw64/include/GL/freeglut.h" ] || [ -f "/mingw32/include/GL/freeglut.h" ]; then \
		echo "✓ FreeGLUT encontrado"; \
	else \
		echo "✗ FreeGLUT não encontrado"; \
	fi
	@echo "====================================="

# Verificar arquivos de música
check-music:
	@echo "=== Verificando arquivos de música ==="
	@if [ -f "src/sounds/faster_than_light.wav" ]; then \
		echo "✓ Música do menu: src/sounds/faster_than_light.wav"; \
	else \
		echo "✗ Música do menu: src/sounds/faster_than_light.wav (FALTANDO)"; \
	fi
	@if [ -f "src/sounds/misty_effect.wav" ]; then \
		echo "✓ Música do jogo: src/sounds/misty_effect.wav"; \
	else \
		echo "✗ Música do jogo: src/sounds/misty_effect.wav (FALTANDO)"; \
	fi
	@echo "======================================"

# Criar diretório de sons se não existir
create-sounds-dir:
	@if [ ! -d "src/sounds" ]; then \
		echo "Criando diretório src/sounds/..."; \
		mkdir -p src/sounds; \
	fi

# Limpeza
clean:
	rm -f $(OBJECTS) $(TARGET) $(TEST_AUDIO)
	@echo "Arquivos limpos!"

# Executar o jogo
run: $(TARGET)
	./$(TARGET)

# Executar com verificação de música
run-with-check: check-music $(TARGET)
	./$(TARGET)

# Instalar dependências (MSYS2)
install-deps:
	@echo "Instalando dependências via pacman (MSYS2)..."
	pacman -S mingw-w64-x86_64-gcc
	pacman -S mingw-w64-x86_64-freeglut
	pacman -S mingw-w64-x86_64-pkg-config
	@echo "Dependências instaladas!"

# Debug build
debug: CXXFLAGS += -g -DDEBUG
debug: $(TARGET)

# Release build
release: CXXFLAGS += -O3 -DNDEBUG
release: clean $(TARGET)

# Verificar dependências
check-deps:
	@echo "Verificando dependências para Windows..."
	@echo "Sistema: Windows (MSYS2/MinGW)"
	@if [ -f "/mingw64/lib/libopengl32.a" ] || [ -f "/mingw32/lib/libopengl32.a" ]; then \
		echo "✓ OpenGL disponível"; \
	else \
		echo "✗ OpenGL não encontrado"; \
	fi
	@if [ -f "/mingw64/lib/libglu32.a" ] || [ -f "/mingw32/lib/libglu32.a" ]; then \
		echo "✓ GLU disponível"; \
	else \
		echo "✗ GLU não encontrado"; \
	fi
	@if [ -f "/mingw64/lib/libfreeglut.a" ] || [ -f "/mingw32/lib/libfreeglut.a" ]; then \
		echo "✓ FreeGLUT disponível"; \
	else \
		echo "✗ FreeGLUT não encontrado"; \
	fi
	@echo "Verificação concluída."

# Listar arquivos que serão compilados
list-sources:
	@echo "Arquivos fonte:"
	@for src in $(SOURCES); do echo "  $$src"; done
	@echo ""
	@echo "Arquivos objeto:"
	@for obj in $(OBJECTS); do echo "  $$obj"; done

# Compilar apenas um arquivo específico para debug
compile-audio:
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c src/audio/Audio.cpp -o src/audio/Audio.o
	@echo "Audio.cpp compilado com sucesso!"

# Verificar se todos os arquivos fonte existem
check-sources:
	@echo "Verificando arquivos fonte..."
	@for src in $(SOURCES); do \
		if [ -f "$$src" ]; then \
			echo "✓ $$src"; \
		else \
			echo "✗ $$src (AUSENTE!)"; \
		fi; \
	done

# Ajuda
help:
	@echo "Cosmic Dash - Makefile para Windows (MSYS2)"
	@echo "============================================"
	@echo "Comandos disponíveis:"
	@echo "  make               - Compilar o jogo"
	@echo "  make run           - Compilar e executar"
	@echo "  make run-with-check- Verificar música e executar"
	@echo "  make test-audio    - Testar arquivos de áudio"
	@echo "  make check-music   - Verificar arquivos de música"
	@echo "  make create-sounds-dir - Criar diretório de sons"
	@echo "  make clean         - Limpar arquivos compilados"
	@echo "  make debug         - Compilar versão debug"
	@echo "  make release       - Compilar versão otimizada"
	@echo "  make install-deps  - Instalar dependências (MSYS2)"
	@echo "  make check-audio   - Verificar bibliotecas de áudio"
	@echo "  make check-deps    - Verificar dependências"
	@echo "  make check-sources - Verificar se arquivos fonte existem"
	@echo "  make list-sources  - Listar arquivos fonte"
	@echo "  make compile-audio - Compilar apenas Audio.cpp"

.PHONY: all clean run run-with-check test-audio install-deps debug release check-deps check-audio check-music create-sounds-dir help list-sources check-sources compile-audio
